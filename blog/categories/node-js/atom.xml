<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | ノビコード.md]]></title>
  <link href="http://fnobi.github.com/blog/categories/node-js/atom.xml" rel="self"/>
  <link href="http://fnobi.github.com/"/>
  <updated>2013-01-08T15:19:00+09:00</updated>
  <id>http://fnobi.github.com/</id>
  <author>
    <name><![CDATA[fnobi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fs.watchFileを使ってみた]]></title>
    <link href="http://fnobi.github.com/blog/2013/01/08/watchfile/"/>
    <updated>2013-01-08T02:21:00+09:00</updated>
    <id>http://fnobi.github.com/blog/2013/01/08/watchfile</id>
    <content type="html"><![CDATA[<h2>fs.watchfileとは?</h2>

<p>　ファイルの変更を監視して、変化が起きたらcallback関数を呼び出して教えてくれる。node以外では見たことない気がするのは、不勉強かしら。</p>

<p>　とにかく、そういうファイルの変更を検知するやつを作りたかったので、こまかい動きを調べてメモしました。</p>

<ul>
<li><a href="http://nodejs.org/api/fs.html#fs_fs_watchfile_filename_options_listener">File System Node.js v0.8.16 Manual &amp; Documentation</a></li>
</ul>


<h2>実験に使ったコード</h2>

<p>```javascript
var fs = require('fs');</p>

<p>var filepath = 'message.txt';</p>

<p>// filepathが存在しなくても、watchFileはエラーとか出してくれないので、
// 先にfs.existsで調べておく
if (!fs.existsSync(filepath)) {</p>

<pre><code>console.error('%s doesn\'t exist.', filepath);
process.exit();
</code></pre>

<p>}</p>

<p>console.log('start watch: %s', filepath);
fs.watchFile(filepath, function (curr, prev) {</p>

<pre><code>// プロパティ丸ごと出力してもらう
console.dir(curr);

// 以前のmtimeと比較
console.log('the current mtime is: ' + curr.mtime);
console.log('the previous mtime was: ' + prev.mtime);
</code></pre>

<p>});
```</p>

<h2>分かったこと</h2>

<h3>開始時に、指定したfilepathが存在しなくても、特にエラーは発生しない。</h3>

<ul>
<li>なので、その前に自分でfs.existsとかしてあげる必要がある。(上のコード参照)</li>
</ul>


<h3>ファイル名を変更しても、ファイルの変更とはみなされない。</h3>

<ul>
<li>ただし、ファイル名を変更した後も、監視は続いている。</li>
<li>chmodとかは、ちゃんと変更とみなされる。</li>
</ul>


<h3>callbackに帰ってくるのはstatオブジェクト。</h3>

<ul>
<li>なので、更新時間や属性などは即時でとれるが、ファイルの内容がどうなったかは、別途fs.readFileなどしないと分からない。</li>
<li>diff的な機能もなし。</li>
</ul>


<h3>対象がディレクトリでもちゃんと動く。</h3>

<ul>
<li>ディレクトリの中のファイルが変更された時、中にファイルが追加された時等ちゃんと検知します。</li>
<li>viで中身のファイル開いた時に、一時ファイルができるのも検知してしまうので、ちょっととまどった。(そりゃそうなんだけど)</li>
</ul>


<h3>当然、「常時待ち」のイベントをひとつ増やすことになる。</h3>

<ul>
<li>例えばexpressサーバーとかは、平常時はhttpサーバーへのアクセスのみ待っている状態になっている。そこに別の常時待ちが入ってくると、なにかしら計算が狂うこともありうる。</li>
<li>自分は、<a href="https://npmjs.org/package/start-stop-daemon">start-stop-daemon</a>とexpressを組み合わせて使っていたので、daemon化する部分にwatchFileの開始処理も組込んでやる必要があった。</li>
</ul>


<h2>そのうち調べる</h2>

<ul>
<li>監視周期1回の間に、変更が2回以上発生したら? (たぶん1回しか反応しないと思うけど)</li>
<li>存在しないファイル名を与えてwatchを開始、その後そのファイルが追加されたら? (たぶん反応しないと思うけど)</li>
<li>unwatchも調べなきゃ……。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rdfstore-jsを使うときの注意]]></title>
    <link href="http://fnobi.github.com/blog/2013/01/08/rdfstore-js/"/>
    <updated>2013-01-08T02:05:00+09:00</updated>
    <id>http://fnobi.github.com/blog/2013/01/08/rdfstore-js</id>
    <content type="html"><![CDATA[<p>　主にエラーハンドリングの処理で、イケてない部分が見つかったのでメモ。</p>

<h2>rdfstore-js</h2>

<h3>パッケージ</h3>

<ul>
<li><a href="https://npmjs.org/package/rdfstore">rdfstore</a></li>
<li><a href="https://github.com/antoniogarrote/rdfstore-js">antoniogarrote/rdfstore-js · GitHub</a></li>
</ul>


<h3>実行環境</h3>

<ul>
<li>node (v0.8.16)</li>
<li>rdfstore (v0.7.0)</li>
</ul>


<h2>store.executeについて</h2>

<p>　<code>callback(success, result)</code>の形にはなっているが、実際にはSyntaxErrorが起きた時にはcallbackしないでエラー終了してしまう。</p>

<p>　現状では、executeしている部分をまるごとtry-catchで囲むか、rdfstore側のコードを修正するしかない。</p>

<p>　SyntaxError時に直接エラーをはいているのは、L22804のthrow。(ここをthrowじゃなくてreturnにすればうまく使える?)</p>

<h2>store.loadについて</h2>

<p>　ファイルのロードに失敗した場合(たぶん厳密に言うと、指定したContentTypeでファイルが読めなかった場合)、L5294とL5295の<code>console.log</code>は、自分の環境ではいつもundefinedを返してきた。</p>

<p>　動作上は問題無いけれど、ログに邪魔なものが残るので、削っていいと思う。</p>
]]></content>
  </entry>
  
</feed>
